{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf370
{\fonttbl\f0\fnil\fcharset0 LucidaGrande;\f1\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red38\green38\blue38;\red233\green235\blue241;\red38\green38\blue38;
\red233\green235\blue241;\red63\green127\blue95;\red63\green95\blue191;\red127\green0\blue85;\red42\green0\blue255;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl240

\f0\fs22 \cf2 \cb3 Acceptance tests have been run for the different user cases. \
\cf4 \cb5 All database methods in the DAO \cf2 \cb3 (Data Access Object)\cf4 \cb5  class have been tested. See below for test code. \
\pard\pardeftab720\sl240
\cf4 \
\pard\pardeftab720

\f1 \cf0 \cb1 	\cf6 ////////////////////Test Cases//////////////////////////////////\cf0 \
	\cf7 /**\cf0 \
\pard\pardeftab720
\cf7 	 * Tests insertIntoTable4 and getAllFromTable4\cf0 \
\cf7 	 */\cf0 \
	\cf8 public\cf0  \cf8 void\cf0  testInsertAndGetFromTable4()\{\
		String building = \cf9 "EDIT"\cf0 ;\
		dao.insertIntoTable4(building);\
		ArrayList<String> result = dao.getAllFromTable4();\
		Assert.assertEquals(building, result.get(0));\
	\}\
	\cf7 /**\cf0 \
\cf7 	 * Tests inserIntroTable2 and getAllFromTable2\cf0 \
\cf7 	 */\cf0 \
	\cf8 public\cf0  \cf8 void\cf0  testInsertIntoTable2AndGetAllFromTable2()\{\
		\cf6 //Insert\cf0 \
		String type1 = \cf9 "Group"\cf0 ;\
		String type2 = \cf9 "Computer"\cf0 ;\
		String type3 = \cf9 "Lecture"\cf0 ;\
		dao.insertIntoTable2(type1);\
		dao.insertIntoTable2(type2);\
		dao.insertIntoTable2(type3);\
		\
		\cf6 //Get All\cf0 \
		ArrayList<String> results = dao.getAllFromTable2();\
		\
		\cf6 //Check if the inserted values is in the result\cf0 \
		Assert.assertTrue(results.contains(type1));\
		Assert.assertTrue(results.contains(type2));\
		Assert.assertTrue(results.contains(type3));\
	\}\
	\cf7 /**\cf0 \
\cf7 	 * Tests insertIntoTable1 and getClosestEntry\cf0 \
\cf7 	 */\cf0 \
	\cf8 public\cf0  \cf8 void\cf0  testInsertAndGetFromTable1()\{\
		Double x = 1.0;\
		Double y = 2.0;\
		LatLng cord = \cf8 new\cf0  LatLng(x,y);\
		String building = \cf9 "EDIT"\cf0 ;\
		dao.insertIntoTable1(x, y, building);\
		LatLng result = dao.getClosestEntry(\cf9 "EDIT"\cf0 ,cord);\
		Assert.assertEquals(cord, result);\
	\}\
	\cf7 /**\cf0 \
\cf7 	 * Tests getClosestEntry and insertIntoTable1\cf0 \
\cf7 	 */\cf0 \
	\cf8 public\cf0  \cf8 void\cf0  testCalculationOfClosestEntry()\{\
		\cf6 //My current coordinates\cf0 \
		LatLng currentCoord = \cf8 new\cf0  LatLng(0.0,0.0);\
		\
		String building = \cf9 "EDIT"\cf0 ;\
		\
		Double x1 = 1.0;\
		Double y1 = 2.0;\
		dao.insertIntoTable1(x1, y1, building);\
		\
		Double x2 = 1.0;\
		Double y2 = 1.0;\
		dao.insertIntoTable1(x2, y2, building);\
		\
		Double x3 = 10.0;\
		Double y3 = 1.0;\
		dao.insertIntoTable1(x3, y3, building);\
		\
		Double x4 = 1.0;\
		Double y4 = 0.5;\
		LatLng expectedCord = \cf8 new\cf0  LatLng(x4,y4);\
		dao.insertIntoTable1(x4, y4, building);\
		\
		Double x5 = 10.0;\
		Double y5 = 10.0;\
		dao.insertIntoTable1(x5, y5, building);\
		\
		LatLng result = dao.getClosestEntry(building,currentCoord);\
		Assert.assertEquals(expectedCord, result);\
	\}\
	\cf7 /**\cf0 \
\cf7 	 * Tests getRoomCoordinates and insertIntoTable1\cf0 \
\cf7 	 */\cf0 \
	\cf8 public\cf0  \cf8 void\cf0  testGetRoomCoordinatesAndInsertIntoTable3()\{\
		String room = \cf9 "EA"\cf0 ;\
		\cf8 double\cf0  xCord = 9.9;\
		\cf8 double\cf0  yCord = 5.5;\
		LatLng in = \cf8 new\cf0  LatLng(xCord,yCord);\
		String building =\cf9 "EDIT"\cf0 ;\
		String type = \cf9 "lecture"\cf0 ;\
		dao.insertIntoTable2(type);\
		dao.insertIntoTable4(building);\
		dao.insertIntoTable3(room, xCord, yCord, type, building, \cf9 "1"\cf0 );\
		LatLng result = dao.getRoomCoordinates(room);\
		Assert.assertEquals(in,result);\
	\}\
	\cf7 /**\cf0 \
\cf7 	 * Tests getAllRooms\cf0 \
\cf7 	 */\cf0 \
	\cf8 public\cf0  \cf8 void\cf0  testGetAllRoomsInBuilding()\{\
		String room = \cf9 "EA"\cf0 ;\
		String room2 = \cf9 "EB"\cf0 ;\
		String falseRoom = \cf9 "XX"\cf0 ;\
		\
		\cf8 double\cf0  xCord = 9.9;\
		\cf8 double\cf0  yCord = 5.5;\
		\
		String building =\cf9 "EDIT"\cf0 ;\
		String falseBuilding = \cf9 "YY"\cf0 ;\
		String type = \cf9 "lecture"\cf0 ;\
		\
		dao.insertIntoTable2(type);\
		dao.insertIntoTable4(building);\
		dao.insertIntoTable4(falseBuilding);\
		dao.insertIntoTable3(room, xCord, yCord, type, building, \cf9 "1"\cf0 );\
		dao.insertIntoTable3(room2, xCord, yCord, type, building, \cf9 "2"\cf0 );\
		dao.insertIntoTable3(falseRoom, xCord, yCord, type, falseBuilding, \cf9 "1"\cf0 );\
		\
		ArrayList<String> results = dao.getAllRoomsInBuilding(building);\
		Assert.assertTrue(results.size() == 2);\
		Assert.assertTrue(results.contains(room));\
		Assert.assertTrue(results.contains(room2));\
		Assert.assertFalse(results.contains(falseRoom));\
		\
	\}\
	\
	\cf7 /**\cf0 \
\cf7 	 * Tests getAllRoomsWithType\cf0 \
\cf7 	 */\cf0 \
	\cf8 public\cf0  \cf8 void\cf0  testGetAllRoomsWithType()\{\
		String room = \cf9 "EA"\cf0 ;\
		String room2 = \cf9 "EB"\cf0 ;\
		String falseRoom = \cf9 "XX"\cf0 ;\
		\
		\cf8 double\cf0  xCord = 9.9;\
		\cf8 double\cf0  yCord = 5.5;\
		\
		String building =\cf9 "EDIT"\cf0 ;\
		String falseType = \cf9 "YY"\cf0 ;\
		String type = \cf9 "lecture"\cf0 ;\
		\
		dao.insertIntoTable2(type);\
		dao.insertIntoTable2(falseType);\
		dao.insertIntoTable4(building);\
		\
		dao.insertIntoTable3(room, xCord, yCord, type, building, \cf9 "1"\cf0 );\
		dao.insertIntoTable3(room2, xCord, yCord, type, building, \cf9 "2"\cf0 );\
		dao.insertIntoTable3(falseRoom, xCord, yCord, falseType, building, \cf9 "1"\cf0 );\
		\
		ArrayList<String> results = dao.getAllRoomsInBuilding(building);\
		Assert.assertTrue(results.size() == 2);\
		Assert.assertTrue(results.contains(room));\
		Assert.assertTrue(results.contains(room2));\
		Assert.assertFalse(results.contains(falseRoom));\
		\
	\}\
	\cf7 /**\cf0 \
\cf7 	 * Tests suggestions\cf0 \
\cf7 	 */\cf0 \
	\cf8 public\cf0  \cf8 void\cf0  testSuggestions()\{\
		String type = \cf9 "lecture"\cf0 ;\
		String building = \cf9 "EDIT"\cf0 ;\
		String room = \cf9 "EA"\cf0 ;\
		\
		dao.insertIntoTable2(type);\
		dao.insertIntoTable4(building);\
		dao.insertIntoTable3(room, 1.0, 1.0, type, building, \cf9 "first"\cf0 );\
		\
		ArrayList<String> list = dao.suggestions(\cf9 "e"\cf0 );\
		Assert.assertTrue(list.size() == 3);\
		\
		list = dao.suggestions(\cf9 "di"\cf0 );\
		Assert.assertTrue(list.size() == 1);\
		\
		list = dao.suggestions(\cf9 "ir"\cf0 );\
		Assert.assertNull(list);\
	\}\
	\cf7 /**\cf0 \
\cf7 	*Tests method getRoomName\cf0 \
\cf7 	*/\cf0 \
	\cf8 public\cf0  \cf8 void\cf0  testGetName()\{\
		Double x6 = 1.0;\
		Double y6 = 2.0;\
		String name = \cf9 "ED222"\cf0 ;\
		dao.insertIntoTable3(name, x6, y6, \cf9 "computer room"\cf0 , \cf9 "EDIT"\cf0 ,\cf9 "3"\cf0 );\
		String result = dao.getName(x6, y6);\
		Assert.assertEquals(name, result);\
	\}\
	\cf7 /**\cf0 \
\cf7 	 * Tests method getType\cf0 \
\cf7 	 */\cf0 \
	\cf8 public\cf0  \cf8 void\cf0  testGetType()\{\
		dao.insertIntoTable3(\cf9 "ED2234"\cf0 , 1, 2, \cf9 "computer room"\cf0 , \cf9 "EDIT"\cf0 , \cf9 "3"\cf0 );\
		String result = dao.getType(\cf9 "ED2234"\cf0 );\
		Assert.assertEquals(\cf9 "computer room"\cf0 , result);		\
	\}\
	\cf7 /**\cf0 \
\cf7 	 * Tests method getFloor\cf0 \
\cf7 	 */\cf0 \
	\cf8 public\cf0  \cf8 void\cf0  testGetFloor()\{\
		dao.insertIntoTable3(\cf9 "ED3232"\cf0 , 2, 2, \cf9 "computer room"\cf0 , \cf9 "EDIT"\cf0 , \cf9 "54"\cf0 );\
		String result = dao.getFloor(\cf9 "ED3232"\cf0 );\
		Assert.assertEquals(\cf9 "54"\cf0 , result);\
	\}\
\}\
}